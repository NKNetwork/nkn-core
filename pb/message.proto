syntax = "proto3";

package pb;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "pb/node.proto";

option (gogoproto.gostring_all) = true;
option (gogoproto.goproto_stringer_all) = false;
option (gogoproto.stringer_all) =  true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.unmarshaler_all) = true;

option (gogoproto.testgen_all) = true;
option (gogoproto.equal_all) = true;
option (gogoproto.populate_all) = true;

enum MessageType {
  MESSAGE_TYPE_PLACEHOLDER_DO_NOT_USE = 0; // Placeholder, do not use or change
  VOTE = 1;
  I_HAVE_BLOCK_PROPOSAL = 2;
  REQUEST_BLOCK_PROPOSAL = 3;
  REQUEST_BLOCK_PROPOSAL_REPLY = 4;
  GET_CONSENSUS_STATE = 5;
  GET_CONSENSUS_STATE_REPLY = 6;
}

// Message type that can be signed message
// Name doesn't matter, but value nees to match the value in MessageType
enum AllowedSignedMessageType {
  ALLOW_SIGNED_PLACEHOLDER_DO_NOT_USE = 0; // Placeholder, do not use or change
  ALLOW_SIGNED_VOTE = 1;
  ALLOW_SIGNED_I_HAVE_BLOCK_PROPOSAL = 2;
  ALLOW_SIGNED_REQUEST_BLOCK_PROPOSAL = 3;
  ALLOW_SIGNED_GET_CONSENSUS_STATE = 5;
  ALLOW_SIGNED_GET_CONSENSUS_STATE_REPLY = 6;
}

// Message type that can be unsigned message
// Name doesn't matter, but value nees to match the value in MessageType
enum AllowedUnsignedMessageType {
  ALLOW_UNSIGNED_PLACEHOLDER_DO_NOT_USE = 0; // Placeholder, do not use or change
  ALLOW_UNSIGNED_REQUEST_BLOCK_REPLY = 4;
}

// Message type that can be sent as direct message
// Name doesn't matter, but value nees to match the value in MessageType
enum AllowedDirectMessageType {
  ALLOW_DIRECT_PLACEHOLDER_DO_NOT_USE = 0; // Placeholder, do not use or change
  ALLOW_DIRECT_VOTE = 1;
  ALLOW_DIRECT_I_HAVE_BLOCK_PROPOSAL = 2;
  ALLOW_DIRECT_REQUEST_BLOCK_PROPOSAL = 3;
  ALLOW_DIRECT_REQUEST_BLOCK_REPLY = 4;
  ALLOW_DIRECT_GET_CONSENSUS_STATE = 5;
  ALLOW_DIRECT_GET_CONSENSUS_STATE_REPLY = 6;
}

// Message type that can be sent as relay message
// Name doesn't matter, but value nees to match the value in MessageType
enum AllowedRelayMessageType {
  ALLOW_RELAY_PLACEHOLDER_DO_NOT_USE = 0; // Placeholder, do not use or change
}

// Message type that can be sent as broadcast_push message
// Name doesn't matter, but value nees to match the value in MessageType
enum AllowedBroadcastPushMessageType {
  ALLOW_BROADCAST_PUSH_PLACEHOLDER_DO_NOT_USE = 0; // Placeholder, do not use or change
}

// Message type that can be sent as broadcast_pull message
// Name doesn't matter, but value nees to match the value in MessageType
enum AllowedBroadcastPullMessageType {
  ALLOW_BROADCAST_PULL_PLACEHOLDER_DO_NOT_USE = 0; // Placeholder, do not use or change
}

// Message type that can be sent as broadcast_tree message
// Name doesn't matter, but value nees to match the value in MessageType
enum AllowedBroadcastTreeMessageType {
  ALLOW_BROADCAST_TREE_PLACEHOLDER_DO_NOT_USE = 0; // Placeholder, do not use or change
}

message UnsignedMessage {
  MessageType message_type = 1;
  bytes message = 2;
}

message SignedMessage {
  bytes message = 1;
  bytes signature = 2;
}

message Vote {
  uint32 height = 1;
  bytes block_hash = 2;
}

message IHaveBlockProposal {
  uint32 height = 1;
  bytes block_hash = 2;
}

message RequestBlockProposal {
  bytes block_hash = 1;
}

message RequestBlockProposalReply {
  bytes block = 1;
}

message GetConsensusState {
}

message GetConsensusStateReply {
  uint32 ledger_height = 1;
  bytes ledger_block_hash = 2;
  uint32 consensus_height = 3;
  SyncState sync_state = 4;
}

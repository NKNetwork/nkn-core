// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pb/message.proto

package pb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import strconv "strconv"

import bytes "bytes"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type MessageType int32

const (
	MESSAGE_TYPE_PLACEHOLDER_DO_NOT_USE MessageType = 0
	VOTE                                MessageType = 1
	I_HAVE_BLOCK                        MessageType = 2
	REQUEST_BLOCK                       MessageType = 3
	REQUEST_BLOCK_REPLY                 MessageType = 4
	GET_CONSENSUS_STATE                 MessageType = 5
	GET_CONSENSUS_STATE_REPLY           MessageType = 6
)

var MessageType_name = map[int32]string{
	0: "MESSAGE_TYPE_PLACEHOLDER_DO_NOT_USE",
	1: "VOTE",
	2: "I_HAVE_BLOCK",
	3: "REQUEST_BLOCK",
	4: "REQUEST_BLOCK_REPLY",
	5: "GET_CONSENSUS_STATE",
	6: "GET_CONSENSUS_STATE_REPLY",
}
var MessageType_value = map[string]int32{
	"MESSAGE_TYPE_PLACEHOLDER_DO_NOT_USE": 0,
	"VOTE":                      1,
	"I_HAVE_BLOCK":              2,
	"REQUEST_BLOCK":             3,
	"REQUEST_BLOCK_REPLY":       4,
	"GET_CONSENSUS_STATE":       5,
	"GET_CONSENSUS_STATE_REPLY": 6,
}

func (MessageType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_message_8a64c327d53c4467, []int{0}
}

// Message type that can be signed message
// Name doesn't matter, but value nees to match the value in MessageType
type AllowedSignedMessageType int32

const (
	ALLOW_SIGNED_PLACEHOLDER_DO_NOT_USE    AllowedSignedMessageType = 0
	ALLOW_SIGNED_VOTE                      AllowedSignedMessageType = 1
	ALLOW_SIGNED_I_HAVE_BLOCK              AllowedSignedMessageType = 2
	ALLOW_SIGNED_REQUEST_BLOCK             AllowedSignedMessageType = 3
	ALLOW_SIGNED_GET_CONSENSUS_STATE       AllowedSignedMessageType = 5
	ALLOW_SIGNED_GET_CONSENSUS_STATE_REPLY AllowedSignedMessageType = 6
)

var AllowedSignedMessageType_name = map[int32]string{
	0: "ALLOW_SIGNED_PLACEHOLDER_DO_NOT_USE",
	1: "ALLOW_SIGNED_VOTE",
	2: "ALLOW_SIGNED_I_HAVE_BLOCK",
	3: "ALLOW_SIGNED_REQUEST_BLOCK",
	5: "ALLOW_SIGNED_GET_CONSENSUS_STATE",
	6: "ALLOW_SIGNED_GET_CONSENSUS_STATE_REPLY",
}
var AllowedSignedMessageType_value = map[string]int32{
	"ALLOW_SIGNED_PLACEHOLDER_DO_NOT_USE":    0,
	"ALLOW_SIGNED_VOTE":                      1,
	"ALLOW_SIGNED_I_HAVE_BLOCK":              2,
	"ALLOW_SIGNED_REQUEST_BLOCK":             3,
	"ALLOW_SIGNED_GET_CONSENSUS_STATE":       5,
	"ALLOW_SIGNED_GET_CONSENSUS_STATE_REPLY": 6,
}

func (AllowedSignedMessageType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_message_8a64c327d53c4467, []int{1}
}

// Message type that can be unsigned message
// Name doesn't matter, but value nees to match the value in MessageType
type AllowedUnsignedMessageType int32

const (
	ALLOW_UNSIGNED_PLACEHOLDER_DO_NOT_USE AllowedUnsignedMessageType = 0
	ALLOW_UNSIGNED_REQUEST_BLOCK_REPLY    AllowedUnsignedMessageType = 4
)

var AllowedUnsignedMessageType_name = map[int32]string{
	0: "ALLOW_UNSIGNED_PLACEHOLDER_DO_NOT_USE",
	4: "ALLOW_UNSIGNED_REQUEST_BLOCK_REPLY",
}
var AllowedUnsignedMessageType_value = map[string]int32{
	"ALLOW_UNSIGNED_PLACEHOLDER_DO_NOT_USE": 0,
	"ALLOW_UNSIGNED_REQUEST_BLOCK_REPLY":    4,
}

func (AllowedUnsignedMessageType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_message_8a64c327d53c4467, []int{2}
}

// Message type that can be sent as direct message
// Name doesn't matter, but value nees to match the value in MessageType
type AllowedDirectMessageType int32

const (
	ALLOW_DIRECT_PLACEHOLDER_DO_NOT_USE    AllowedDirectMessageType = 0
	ALLOW_DIRECT_VOTE                      AllowedDirectMessageType = 1
	ALLOW_DIRECT_I_HAVE_BLOCK              AllowedDirectMessageType = 2
	ALLOW_DIRECT_REQUEST_BLOCK             AllowedDirectMessageType = 3
	ALLOW_DIRECT_REQUEST_BLOCK_REPLY       AllowedDirectMessageType = 4
	ALLOW_DIRECT_GET_CONSENSUS_STATE       AllowedDirectMessageType = 5
	ALLOW_DIRECT_GET_CONSENSUS_STATE_REPLY AllowedDirectMessageType = 6
)

var AllowedDirectMessageType_name = map[int32]string{
	0: "ALLOW_DIRECT_PLACEHOLDER_DO_NOT_USE",
	1: "ALLOW_DIRECT_VOTE",
	2: "ALLOW_DIRECT_I_HAVE_BLOCK",
	3: "ALLOW_DIRECT_REQUEST_BLOCK",
	4: "ALLOW_DIRECT_REQUEST_BLOCK_REPLY",
	5: "ALLOW_DIRECT_GET_CONSENSUS_STATE",
	6: "ALLOW_DIRECT_GET_CONSENSUS_STATE_REPLY",
}
var AllowedDirectMessageType_value = map[string]int32{
	"ALLOW_DIRECT_PLACEHOLDER_DO_NOT_USE":    0,
	"ALLOW_DIRECT_VOTE":                      1,
	"ALLOW_DIRECT_I_HAVE_BLOCK":              2,
	"ALLOW_DIRECT_REQUEST_BLOCK":             3,
	"ALLOW_DIRECT_REQUEST_BLOCK_REPLY":       4,
	"ALLOW_DIRECT_GET_CONSENSUS_STATE":       5,
	"ALLOW_DIRECT_GET_CONSENSUS_STATE_REPLY": 6,
}

func (AllowedDirectMessageType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_message_8a64c327d53c4467, []int{3}
}

// Message type that can be sent as relay message
// Name doesn't matter, but value nees to match the value in MessageType
type AllowedRelayMessageType int32

const (
	ALLOW_RELAY_PLACEHOLDER_DO_NOT_USE AllowedRelayMessageType = 0
)

var AllowedRelayMessageType_name = map[int32]string{
	0: "ALLOW_RELAY_PLACEHOLDER_DO_NOT_USE",
}
var AllowedRelayMessageType_value = map[string]int32{
	"ALLOW_RELAY_PLACEHOLDER_DO_NOT_USE": 0,
}

func (AllowedRelayMessageType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_message_8a64c327d53c4467, []int{4}
}

// Message type that can be sent as broadcast_push message
// Name doesn't matter, but value nees to match the value in MessageType
type AllowedBroadcastPushMessageType int32

const (
	ALLOW_BROADCAST_PUSH_PLACEHOLDER_DO_NOT_USE AllowedBroadcastPushMessageType = 0
)

var AllowedBroadcastPushMessageType_name = map[int32]string{
	0: "ALLOW_BROADCAST_PUSH_PLACEHOLDER_DO_NOT_USE",
}
var AllowedBroadcastPushMessageType_value = map[string]int32{
	"ALLOW_BROADCAST_PUSH_PLACEHOLDER_DO_NOT_USE": 0,
}

func (AllowedBroadcastPushMessageType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_message_8a64c327d53c4467, []int{5}
}

// Message type that can be sent as broadcast_pull message
// Name doesn't matter, but value nees to match the value in MessageType
type AllowedBroadcastPullMessageType int32

const (
	ALLOW_BROADCAST_PULL_PLACEHOLDER_DO_NOT_USE AllowedBroadcastPullMessageType = 0
)

var AllowedBroadcastPullMessageType_name = map[int32]string{
	0: "ALLOW_BROADCAST_PULL_PLACEHOLDER_DO_NOT_USE",
}
var AllowedBroadcastPullMessageType_value = map[string]int32{
	"ALLOW_BROADCAST_PULL_PLACEHOLDER_DO_NOT_USE": 0,
}

func (AllowedBroadcastPullMessageType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_message_8a64c327d53c4467, []int{6}
}

// Message type that can be sent as broadcast_tree message
// Name doesn't matter, but value nees to match the value in MessageType
type AllowedBroadcastTreeMessageType int32

const (
	ALLOW_BROADCAST_TREE_PLACEHOLDER_DO_NOT_USE AllowedBroadcastTreeMessageType = 0
)

var AllowedBroadcastTreeMessageType_name = map[int32]string{
	0: "ALLOW_BROADCAST_TREE_PLACEHOLDER_DO_NOT_USE",
}
var AllowedBroadcastTreeMessageType_value = map[string]int32{
	"ALLOW_BROADCAST_TREE_PLACEHOLDER_DO_NOT_USE": 0,
}

func (AllowedBroadcastTreeMessageType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_message_8a64c327d53c4467, []int{7}
}

type UnsignedMessage struct {
	MessageType MessageType `protobuf:"varint,1,opt,name=message_type,json=messageType,proto3,enum=pb.MessageType" json:"message_type,omitempty"`
	Message     []byte      `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *UnsignedMessage) Reset()      { *m = UnsignedMessage{} }
func (*UnsignedMessage) ProtoMessage() {}
func (*UnsignedMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_message_8a64c327d53c4467, []int{0}
}
func (m *UnsignedMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnsignedMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnsignedMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UnsignedMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnsignedMessage.Merge(dst, src)
}
func (m *UnsignedMessage) XXX_Size() int {
	return m.Size()
}
func (m *UnsignedMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_UnsignedMessage.DiscardUnknown(m)
}

var xxx_messageInfo_UnsignedMessage proto.InternalMessageInfo

func (m *UnsignedMessage) GetMessageType() MessageType {
	if m != nil {
		return m.MessageType
	}
	return MESSAGE_TYPE_PLACEHOLDER_DO_NOT_USE
}

func (m *UnsignedMessage) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

type SignedMessage struct {
	Message   []byte `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Signature []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *SignedMessage) Reset()      { *m = SignedMessage{} }
func (*SignedMessage) ProtoMessage() {}
func (*SignedMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_message_8a64c327d53c4467, []int{1}
}
func (m *SignedMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignedMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignedMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SignedMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignedMessage.Merge(dst, src)
}
func (m *SignedMessage) XXX_Size() int {
	return m.Size()
}
func (m *SignedMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_SignedMessage.DiscardUnknown(m)
}

var xxx_messageInfo_SignedMessage proto.InternalMessageInfo

func (m *SignedMessage) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *SignedMessage) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type Vote struct {
	Height    uint32 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	BlockHash []byte `protobuf:"bytes,2,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
}

func (m *Vote) Reset()      { *m = Vote{} }
func (*Vote) ProtoMessage() {}
func (*Vote) Descriptor() ([]byte, []int) {
	return fileDescriptor_message_8a64c327d53c4467, []int{2}
}
func (m *Vote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Vote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Vote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Vote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vote.Merge(dst, src)
}
func (m *Vote) XXX_Size() int {
	return m.Size()
}
func (m *Vote) XXX_DiscardUnknown() {
	xxx_messageInfo_Vote.DiscardUnknown(m)
}

var xxx_messageInfo_Vote proto.InternalMessageInfo

func (m *Vote) GetHeight() uint32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *Vote) GetBlockHash() []byte {
	if m != nil {
		return m.BlockHash
	}
	return nil
}

type IHaveBlock struct {
	Height    uint32 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	BlockHash []byte `protobuf:"bytes,2,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
}

func (m *IHaveBlock) Reset()      { *m = IHaveBlock{} }
func (*IHaveBlock) ProtoMessage() {}
func (*IHaveBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_message_8a64c327d53c4467, []int{3}
}
func (m *IHaveBlock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IHaveBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IHaveBlock.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *IHaveBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IHaveBlock.Merge(dst, src)
}
func (m *IHaveBlock) XXX_Size() int {
	return m.Size()
}
func (m *IHaveBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_IHaveBlock.DiscardUnknown(m)
}

var xxx_messageInfo_IHaveBlock proto.InternalMessageInfo

func (m *IHaveBlock) GetHeight() uint32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *IHaveBlock) GetBlockHash() []byte {
	if m != nil {
		return m.BlockHash
	}
	return nil
}

type RequestBlock struct {
	BlockHash []byte `protobuf:"bytes,1,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
}

func (m *RequestBlock) Reset()      { *m = RequestBlock{} }
func (*RequestBlock) ProtoMessage() {}
func (*RequestBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_message_8a64c327d53c4467, []int{4}
}
func (m *RequestBlock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestBlock.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RequestBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestBlock.Merge(dst, src)
}
func (m *RequestBlock) XXX_Size() int {
	return m.Size()
}
func (m *RequestBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestBlock.DiscardUnknown(m)
}

var xxx_messageInfo_RequestBlock proto.InternalMessageInfo

func (m *RequestBlock) GetBlockHash() []byte {
	if m != nil {
		return m.BlockHash
	}
	return nil
}

type RequestBlockReply struct {
	Block []byte `protobuf:"bytes,1,opt,name=block,proto3" json:"block,omitempty"`
}

func (m *RequestBlockReply) Reset()      { *m = RequestBlockReply{} }
func (*RequestBlockReply) ProtoMessage() {}
func (*RequestBlockReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_message_8a64c327d53c4467, []int{5}
}
func (m *RequestBlockReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestBlockReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestBlockReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RequestBlockReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestBlockReply.Merge(dst, src)
}
func (m *RequestBlockReply) XXX_Size() int {
	return m.Size()
}
func (m *RequestBlockReply) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestBlockReply.DiscardUnknown(m)
}

var xxx_messageInfo_RequestBlockReply proto.InternalMessageInfo

func (m *RequestBlockReply) GetBlock() []byte {
	if m != nil {
		return m.Block
	}
	return nil
}

type GetConsensusState struct {
}

func (m *GetConsensusState) Reset()      { *m = GetConsensusState{} }
func (*GetConsensusState) ProtoMessage() {}
func (*GetConsensusState) Descriptor() ([]byte, []int) {
	return fileDescriptor_message_8a64c327d53c4467, []int{6}
}
func (m *GetConsensusState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetConsensusState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetConsensusState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetConsensusState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetConsensusState.Merge(dst, src)
}
func (m *GetConsensusState) XXX_Size() int {
	return m.Size()
}
func (m *GetConsensusState) XXX_DiscardUnknown() {
	xxx_messageInfo_GetConsensusState.DiscardUnknown(m)
}

var xxx_messageInfo_GetConsensusState proto.InternalMessageInfo

type GetConsensusStateReply struct {
	LedgerHeight    uint32    `protobuf:"varint,1,opt,name=ledger_height,json=ledgerHeight,proto3" json:"ledger_height,omitempty"`
	LedgerBlockHash []byte    `protobuf:"bytes,2,opt,name=ledger_block_hash,json=ledgerBlockHash,proto3" json:"ledger_block_hash,omitempty"`
	ConsensusHeight uint32    `protobuf:"varint,3,opt,name=consensus_height,json=consensusHeight,proto3" json:"consensus_height,omitempty"`
	SyncState       SyncState `protobuf:"varint,4,opt,name=sync_state,json=syncState,proto3,enum=pb.SyncState" json:"sync_state,omitempty"`
}

func (m *GetConsensusStateReply) Reset()      { *m = GetConsensusStateReply{} }
func (*GetConsensusStateReply) ProtoMessage() {}
func (*GetConsensusStateReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_message_8a64c327d53c4467, []int{7}
}
func (m *GetConsensusStateReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetConsensusStateReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetConsensusStateReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetConsensusStateReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetConsensusStateReply.Merge(dst, src)
}
func (m *GetConsensusStateReply) XXX_Size() int {
	return m.Size()
}
func (m *GetConsensusStateReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetConsensusStateReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetConsensusStateReply proto.InternalMessageInfo

func (m *GetConsensusStateReply) GetLedgerHeight() uint32 {
	if m != nil {
		return m.LedgerHeight
	}
	return 0
}

func (m *GetConsensusStateReply) GetLedgerBlockHash() []byte {
	if m != nil {
		return m.LedgerBlockHash
	}
	return nil
}

func (m *GetConsensusStateReply) GetConsensusHeight() uint32 {
	if m != nil {
		return m.ConsensusHeight
	}
	return 0
}

func (m *GetConsensusStateReply) GetSyncState() SyncState {
	if m != nil {
		return m.SyncState
	}
	return SyncStarted
}

func init() {
	proto.RegisterType((*UnsignedMessage)(nil), "pb.UnsignedMessage")
	proto.RegisterType((*SignedMessage)(nil), "pb.SignedMessage")
	proto.RegisterType((*Vote)(nil), "pb.Vote")
	proto.RegisterType((*IHaveBlock)(nil), "pb.IHaveBlock")
	proto.RegisterType((*RequestBlock)(nil), "pb.RequestBlock")
	proto.RegisterType((*RequestBlockReply)(nil), "pb.RequestBlockReply")
	proto.RegisterType((*GetConsensusState)(nil), "pb.GetConsensusState")
	proto.RegisterType((*GetConsensusStateReply)(nil), "pb.GetConsensusStateReply")
	proto.RegisterEnum("pb.MessageType", MessageType_name, MessageType_value)
	proto.RegisterEnum("pb.AllowedSignedMessageType", AllowedSignedMessageType_name, AllowedSignedMessageType_value)
	proto.RegisterEnum("pb.AllowedUnsignedMessageType", AllowedUnsignedMessageType_name, AllowedUnsignedMessageType_value)
	proto.RegisterEnum("pb.AllowedDirectMessageType", AllowedDirectMessageType_name, AllowedDirectMessageType_value)
	proto.RegisterEnum("pb.AllowedRelayMessageType", AllowedRelayMessageType_name, AllowedRelayMessageType_value)
	proto.RegisterEnum("pb.AllowedBroadcastPushMessageType", AllowedBroadcastPushMessageType_name, AllowedBroadcastPushMessageType_value)
	proto.RegisterEnum("pb.AllowedBroadcastPullMessageType", AllowedBroadcastPullMessageType_name, AllowedBroadcastPullMessageType_value)
	proto.RegisterEnum("pb.AllowedBroadcastTreeMessageType", AllowedBroadcastTreeMessageType_name, AllowedBroadcastTreeMessageType_value)
}
func (x MessageType) String() string {
	s, ok := MessageType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x AllowedSignedMessageType) String() string {
	s, ok := AllowedSignedMessageType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x AllowedUnsignedMessageType) String() string {
	s, ok := AllowedUnsignedMessageType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x AllowedDirectMessageType) String() string {
	s, ok := AllowedDirectMessageType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x AllowedRelayMessageType) String() string {
	s, ok := AllowedRelayMessageType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x AllowedBroadcastPushMessageType) String() string {
	s, ok := AllowedBroadcastPushMessageType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x AllowedBroadcastPullMessageType) String() string {
	s, ok := AllowedBroadcastPullMessageType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x AllowedBroadcastTreeMessageType) String() string {
	s, ok := AllowedBroadcastTreeMessageType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *UnsignedMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UnsignedMessage)
	if !ok {
		that2, ok := that.(UnsignedMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MessageType != that1.MessageType {
		return false
	}
	if !bytes.Equal(this.Message, that1.Message) {
		return false
	}
	return true
}
func (this *SignedMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SignedMessage)
	if !ok {
		that2, ok := that.(SignedMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Message, that1.Message) {
		return false
	}
	if !bytes.Equal(this.Signature, that1.Signature) {
		return false
	}
	return true
}
func (this *Vote) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Vote)
	if !ok {
		that2, ok := that.(Vote)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Height != that1.Height {
		return false
	}
	if !bytes.Equal(this.BlockHash, that1.BlockHash) {
		return false
	}
	return true
}
func (this *IHaveBlock) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*IHaveBlock)
	if !ok {
		that2, ok := that.(IHaveBlock)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Height != that1.Height {
		return false
	}
	if !bytes.Equal(this.BlockHash, that1.BlockHash) {
		return false
	}
	return true
}
func (this *RequestBlock) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestBlock)
	if !ok {
		that2, ok := that.(RequestBlock)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.BlockHash, that1.BlockHash) {
		return false
	}
	return true
}
func (this *RequestBlockReply) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestBlockReply)
	if !ok {
		that2, ok := that.(RequestBlockReply)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Block, that1.Block) {
		return false
	}
	return true
}
func (this *GetConsensusState) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetConsensusState)
	if !ok {
		that2, ok := that.(GetConsensusState)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GetConsensusStateReply) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetConsensusStateReply)
	if !ok {
		that2, ok := that.(GetConsensusStateReply)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.LedgerHeight != that1.LedgerHeight {
		return false
	}
	if !bytes.Equal(this.LedgerBlockHash, that1.LedgerBlockHash) {
		return false
	}
	if this.ConsensusHeight != that1.ConsensusHeight {
		return false
	}
	if this.SyncState != that1.SyncState {
		return false
	}
	return true
}
func (this *UnsignedMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.UnsignedMessage{")
	s = append(s, "MessageType: "+fmt.Sprintf("%#v", this.MessageType)+",\n")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SignedMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.SignedMessage{")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	s = append(s, "Signature: "+fmt.Sprintf("%#v", this.Signature)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Vote) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.Vote{")
	s = append(s, "Height: "+fmt.Sprintf("%#v", this.Height)+",\n")
	s = append(s, "BlockHash: "+fmt.Sprintf("%#v", this.BlockHash)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *IHaveBlock) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.IHaveBlock{")
	s = append(s, "Height: "+fmt.Sprintf("%#v", this.Height)+",\n")
	s = append(s, "BlockHash: "+fmt.Sprintf("%#v", this.BlockHash)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestBlock) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.RequestBlock{")
	s = append(s, "BlockHash: "+fmt.Sprintf("%#v", this.BlockHash)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestBlockReply) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.RequestBlockReply{")
	s = append(s, "Block: "+fmt.Sprintf("%#v", this.Block)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetConsensusState) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pb.GetConsensusState{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetConsensusStateReply) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.GetConsensusStateReply{")
	s = append(s, "LedgerHeight: "+fmt.Sprintf("%#v", this.LedgerHeight)+",\n")
	s = append(s, "LedgerBlockHash: "+fmt.Sprintf("%#v", this.LedgerBlockHash)+",\n")
	s = append(s, "ConsensusHeight: "+fmt.Sprintf("%#v", this.ConsensusHeight)+",\n")
	s = append(s, "SyncState: "+fmt.Sprintf("%#v", this.SyncState)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringMessage(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *UnsignedMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnsignedMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MessageType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.MessageType))
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	return i, nil
}

func (m *SignedMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignedMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if len(m.Signature) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Signature)))
		i += copy(dAtA[i:], m.Signature)
	}
	return i, nil
}

func (m *Vote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Vote) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.Height))
	}
	if len(m.BlockHash) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessage(dAtA, i, uint64(len(m.BlockHash)))
		i += copy(dAtA[i:], m.BlockHash)
	}
	return i, nil
}

func (m *IHaveBlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IHaveBlock) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.Height))
	}
	if len(m.BlockHash) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessage(dAtA, i, uint64(len(m.BlockHash)))
		i += copy(dAtA[i:], m.BlockHash)
	}
	return i, nil
}

func (m *RequestBlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestBlock) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.BlockHash) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessage(dAtA, i, uint64(len(m.BlockHash)))
		i += copy(dAtA[i:], m.BlockHash)
	}
	return i, nil
}

func (m *RequestBlockReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestBlockReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Block) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Block)))
		i += copy(dAtA[i:], m.Block)
	}
	return i, nil
}

func (m *GetConsensusState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetConsensusState) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GetConsensusStateReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetConsensusStateReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.LedgerHeight != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.LedgerHeight))
	}
	if len(m.LedgerBlockHash) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessage(dAtA, i, uint64(len(m.LedgerBlockHash)))
		i += copy(dAtA[i:], m.LedgerBlockHash)
	}
	if m.ConsensusHeight != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.ConsensusHeight))
	}
	if m.SyncState != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.SyncState))
	}
	return i, nil
}

func encodeVarintMessage(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedUnsignedMessage(r randyMessage, easy bool) *UnsignedMessage {
	this := &UnsignedMessage{}
	this.MessageType = MessageType([]int32{0, 1, 2, 3, 4, 5, 6}[r.Intn(7)])
	v1 := r.Intn(100)
	this.Message = make([]byte, v1)
	for i := 0; i < v1; i++ {
		this.Message[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSignedMessage(r randyMessage, easy bool) *SignedMessage {
	this := &SignedMessage{}
	v2 := r.Intn(100)
	this.Message = make([]byte, v2)
	for i := 0; i < v2; i++ {
		this.Message[i] = byte(r.Intn(256))
	}
	v3 := r.Intn(100)
	this.Signature = make([]byte, v3)
	for i := 0; i < v3; i++ {
		this.Signature[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedVote(r randyMessage, easy bool) *Vote {
	this := &Vote{}
	this.Height = uint32(r.Uint32())
	v4 := r.Intn(100)
	this.BlockHash = make([]byte, v4)
	for i := 0; i < v4; i++ {
		this.BlockHash[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedIHaveBlock(r randyMessage, easy bool) *IHaveBlock {
	this := &IHaveBlock{}
	this.Height = uint32(r.Uint32())
	v5 := r.Intn(100)
	this.BlockHash = make([]byte, v5)
	for i := 0; i < v5; i++ {
		this.BlockHash[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRequestBlock(r randyMessage, easy bool) *RequestBlock {
	this := &RequestBlock{}
	v6 := r.Intn(100)
	this.BlockHash = make([]byte, v6)
	for i := 0; i < v6; i++ {
		this.BlockHash[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRequestBlockReply(r randyMessage, easy bool) *RequestBlockReply {
	this := &RequestBlockReply{}
	v7 := r.Intn(100)
	this.Block = make([]byte, v7)
	for i := 0; i < v7; i++ {
		this.Block[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetConsensusState(r randyMessage, easy bool) *GetConsensusState {
	this := &GetConsensusState{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetConsensusStateReply(r randyMessage, easy bool) *GetConsensusStateReply {
	this := &GetConsensusStateReply{}
	this.LedgerHeight = uint32(r.Uint32())
	v8 := r.Intn(100)
	this.LedgerBlockHash = make([]byte, v8)
	for i := 0; i < v8; i++ {
		this.LedgerBlockHash[i] = byte(r.Intn(256))
	}
	this.ConsensusHeight = uint32(r.Uint32())
	this.SyncState = SyncState([]int32{0, 1, 2, 3}[r.Intn(4)])
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyMessage interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneMessage(r randyMessage) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringMessage(r randyMessage) string {
	v9 := r.Intn(100)
	tmps := make([]rune, v9)
	for i := 0; i < v9; i++ {
		tmps[i] = randUTF8RuneMessage(r)
	}
	return string(tmps)
}
func randUnrecognizedMessage(r randyMessage, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldMessage(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldMessage(dAtA []byte, r randyMessage, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateMessage(dAtA, uint64(key))
		v10 := r.Int63()
		if r.Intn(2) == 0 {
			v10 *= -1
		}
		dAtA = encodeVarintPopulateMessage(dAtA, uint64(v10))
	case 1:
		dAtA = encodeVarintPopulateMessage(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateMessage(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateMessage(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateMessage(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateMessage(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *UnsignedMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MessageType != 0 {
		n += 1 + sovMessage(uint64(m.MessageType))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *SignedMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *Vote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovMessage(uint64(m.Height))
	}
	l = len(m.BlockHash)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *IHaveBlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovMessage(uint64(m.Height))
	}
	l = len(m.BlockHash)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *RequestBlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BlockHash)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *RequestBlockReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Block)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *GetConsensusState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetConsensusStateReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LedgerHeight != 0 {
		n += 1 + sovMessage(uint64(m.LedgerHeight))
	}
	l = len(m.LedgerBlockHash)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.ConsensusHeight != 0 {
		n += 1 + sovMessage(uint64(m.ConsensusHeight))
	}
	if m.SyncState != 0 {
		n += 1 + sovMessage(uint64(m.SyncState))
	}
	return n
}

func sovMessage(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMessage(x uint64) (n int) {
	return sovMessage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *UnsignedMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UnsignedMessage{`,
		`MessageType:` + fmt.Sprintf("%v", this.MessageType) + `,`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SignedMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SignedMessage{`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`Signature:` + fmt.Sprintf("%v", this.Signature) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Vote) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Vote{`,
		`Height:` + fmt.Sprintf("%v", this.Height) + `,`,
		`BlockHash:` + fmt.Sprintf("%v", this.BlockHash) + `,`,
		`}`,
	}, "")
	return s
}
func (this *IHaveBlock) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&IHaveBlock{`,
		`Height:` + fmt.Sprintf("%v", this.Height) + `,`,
		`BlockHash:` + fmt.Sprintf("%v", this.BlockHash) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestBlock) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestBlock{`,
		`BlockHash:` + fmt.Sprintf("%v", this.BlockHash) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestBlockReply) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestBlockReply{`,
		`Block:` + fmt.Sprintf("%v", this.Block) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetConsensusState) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetConsensusState{`,
		`}`,
	}, "")
	return s
}
func (this *GetConsensusStateReply) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetConsensusStateReply{`,
		`LedgerHeight:` + fmt.Sprintf("%v", this.LedgerHeight) + `,`,
		`LedgerBlockHash:` + fmt.Sprintf("%v", this.LedgerBlockHash) + `,`,
		`ConsensusHeight:` + fmt.Sprintf("%v", this.ConsensusHeight) + `,`,
		`SyncState:` + fmt.Sprintf("%v", this.SyncState) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringMessage(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *UnsignedMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnsignedMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnsignedMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageType", wireType)
			}
			m.MessageType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageType |= (MessageType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = append(m.Message[:0], dAtA[iNdEx:postIndex]...)
			if m.Message == nil {
				m.Message = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignedMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignedMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignedMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = append(m.Message[:0], dAtA[iNdEx:postIndex]...)
			if m.Message == nil {
				m.Message = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Vote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Vote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Vote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockHash = append(m.BlockHash[:0], dAtA[iNdEx:postIndex]...)
			if m.BlockHash == nil {
				m.BlockHash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IHaveBlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IHaveBlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IHaveBlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockHash = append(m.BlockHash[:0], dAtA[iNdEx:postIndex]...)
			if m.BlockHash == nil {
				m.BlockHash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestBlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestBlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestBlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockHash = append(m.BlockHash[:0], dAtA[iNdEx:postIndex]...)
			if m.BlockHash == nil {
				m.BlockHash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestBlockReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestBlockReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestBlockReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Block", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Block = append(m.Block[:0], dAtA[iNdEx:postIndex]...)
			if m.Block == nil {
				m.Block = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetConsensusState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetConsensusState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetConsensusState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetConsensusStateReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetConsensusStateReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetConsensusStateReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LedgerHeight", wireType)
			}
			m.LedgerHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LedgerHeight |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LedgerBlockHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LedgerBlockHash = append(m.LedgerBlockHash[:0], dAtA[iNdEx:postIndex]...)
			if m.LedgerBlockHash == nil {
				m.LedgerBlockHash = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsensusHeight", wireType)
			}
			m.ConsensusHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConsensusHeight |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SyncState", wireType)
			}
			m.SyncState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SyncState |= (SyncState(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMessage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMessage
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMessage
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMessage(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMessage = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMessage   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("pb/message.proto", fileDescriptor_message_8a64c327d53c4467) }

var fileDescriptor_message_8a64c327d53c4467 = []byte{
	// 771 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x55, 0x41, 0x73, 0xea, 0x54,
	0x14, 0xe6, 0xf2, 0x78, 0xd5, 0x77, 0x1e, 0x48, 0xc8, 0xd3, 0xf7, 0x28, 0x63, 0xaf, 0x1d, 0xaa,
	0xb5, 0x45, 0x0b, 0x33, 0x75, 0xab, 0x8b, 0x00, 0x77, 0x80, 0x31, 0x25, 0x98, 0x84, 0x3a, 0x5d,
	0xdd, 0x49, 0xe0, 0x0a, 0x8c, 0x29, 0x89, 0x24, 0xe8, 0xb0, 0xf3, 0x27, 0xe8, 0xbf, 0xf0, 0x17,
	0x38, 0xae, 0x5d, 0xb9, 0xec, 0xb2, 0x4b, 0x49, 0x37, 0xce, 0xb8, 0xe9, 0xd2, 0xa5, 0x43, 0x72,
	0x43, 0x09, 0x85, 0xc1, 0xba, 0xcb, 0xf9, 0xce, 0x77, 0xbf, 0x9c, 0xef, 0xbb, 0x67, 0x12, 0x10,
	0x1c, 0xb3, 0x72, 0xcd, 0x5c, 0xd7, 0x18, 0xb0, 0xb2, 0x33, 0xb1, 0x3d, 0x5b, 0x4c, 0x3a, 0x66,
	0xe1, 0x6c, 0x30, 0xf2, 0x86, 0x53, 0xb3, 0xdc, 0xb3, 0xaf, 0x2b, 0x03, 0x7b, 0x60, 0x57, 0x82,
	0x96, 0x39, 0xfd, 0x26, 0xa8, 0x82, 0x22, 0x78, 0x0a, 0x8f, 0x14, 0x32, 0x8e, 0x59, 0x19, 0xdb,
	0x7d, 0xae, 0x50, 0xa4, 0x90, 0xed, 0x8e, 0xdd, 0xd1, 0x60, 0xcc, 0xfa, 0x17, 0xa1, 0xb4, 0x78,
	0x0e, 0x69, 0xfe, 0x16, 0xea, 0xcd, 0x1c, 0x96, 0x47, 0x87, 0xe8, 0xe4, 0x9d, 0xf3, 0x6c, 0xd9,
	0x31, 0xcb, 0x9c, 0xa2, 0xcf, 0x1c, 0xa6, 0xbe, 0xbc, 0x7e, 0x28, 0xc4, 0x3c, 0xbc, 0xc5, 0xcb,
	0x7c, 0xf2, 0x10, 0x9d, 0xa4, 0xd5, 0xa8, 0x2c, 0x36, 0x20, 0xa3, 0xc5, 0xe4, 0x57, 0xa8, 0x28,
	0x46, 0x15, 0xdf, 0x87, 0x17, 0x8b, 0x49, 0x0c, 0x6f, 0x3a, 0x89, 0x64, 0x1e, 0x80, 0xe2, 0x17,
	0x90, 0xba, 0xb4, 0x3d, 0x26, 0xbe, 0x86, 0xbd, 0x21, 0x1b, 0x0d, 0x86, 0x5e, 0x70, 0x3c, 0xa3,
	0xf2, 0x4a, 0x3c, 0x00, 0x30, 0x2d, 0xbb, 0xf7, 0x2d, 0x1d, 0x1a, 0xee, 0x30, 0x3a, 0x1e, 0x20,
	0x4d, 0xc3, 0x1d, 0x16, 0x6b, 0x00, 0xad, 0xa6, 0xf1, 0x3d, 0xab, 0x2e, 0x90, 0xff, 0x2b, 0x72,
	0x06, 0x69, 0x95, 0x7d, 0x37, 0x65, 0xae, 0x17, 0xca, 0xc4, 0xe9, 0x68, 0x9d, 0x7e, 0x0a, 0xb9,
	0x55, 0xba, 0xca, 0x1c, 0x6b, 0x26, 0xbe, 0x0b, 0xcf, 0x03, 0x06, 0xa7, 0x87, 0x45, 0xf1, 0x15,
	0xe4, 0x1a, 0xcc, 0xab, 0xd9, 0x63, 0x97, 0x8d, 0xdd, 0xa9, 0xab, 0x79, 0x86, 0xc7, 0x8a, 0xbf,
	0x23, 0x78, 0xfd, 0x08, 0x0d, 0x55, 0x8e, 0x20, 0x63, 0xb1, 0xfe, 0x80, 0x4d, 0x68, 0xcc, 0x47,
	0x3a, 0x04, 0x9b, 0xa1, 0x9b, 0x12, 0xe4, 0x38, 0xe9, 0x91, 0xa9, 0x6c, 0xd8, 0xa8, 0x46, 0xb3,
	0x8a, 0xa7, 0x20, 0xf4, 0xa2, 0xf7, 0x44, 0x9a, 0xcf, 0x02, 0xcd, 0xec, 0x12, 0xe7, 0xb2, 0x9f,
	0x02, 0xb8, 0xb3, 0x71, 0x8f, 0xba, 0x8b, 0x71, 0xf2, 0xa9, 0x60, 0x3d, 0x32, 0x8b, 0xf5, 0xd0,
	0x66, 0xe3, 0x5e, 0x38, 0xe3, 0x0b, 0x37, 0x7a, 0x2c, 0xfd, 0x8a, 0xe0, 0xe5, 0xca, 0xde, 0x88,
	0x1f, 0xc3, 0xd1, 0x05, 0xd1, 0x34, 0xa9, 0x41, 0xa8, 0x7e, 0xd5, 0x21, 0xb4, 0x23, 0x4b, 0x35,
	0xd2, 0x54, 0xe4, 0x3a, 0x51, 0x69, 0x5d, 0xa1, 0x6d, 0x45, 0xa7, 0x5d, 0x8d, 0x08, 0x09, 0xf1,
	0x6d, 0x48, 0x5d, 0x2a, 0x3a, 0x11, 0x90, 0x28, 0x40, 0xba, 0x45, 0x9b, 0xd2, 0x25, 0xa1, 0x55,
	0x59, 0xa9, 0x7d, 0x29, 0x24, 0xc5, 0x1c, 0x64, 0x54, 0xf2, 0x55, 0x97, 0x68, 0x3a, 0x87, 0x9e,
	0x89, 0x6f, 0xe0, 0x55, 0x0c, 0xa2, 0x2a, 0xe9, 0xc8, 0x57, 0x42, 0x6a, 0xd1, 0x68, 0x10, 0x9d,
	0xd6, 0x94, 0xb6, 0x46, 0xda, 0x5a, 0x57, 0xa3, 0x9a, 0x2e, 0xe9, 0x44, 0x78, 0x2e, 0x1e, 0xc0,
	0xfe, 0x86, 0x06, 0x3f, 0xb7, 0x57, 0xfa, 0x1b, 0x41, 0x5e, 0xb2, 0x2c, 0xfb, 0x07, 0xd6, 0x8f,
	0x6d, 0x70, 0xe4, 0x42, 0x92, 0x65, 0xe5, 0x6b, 0xaa, 0xb5, 0x1a, 0x6d, 0x52, 0xdf, 0xee, 0xe2,
	0x3d, 0xc8, 0xc5, 0x88, 0xdc, 0xd2, 0x01, 0xec, 0xc7, 0xe0, 0x35, 0x7f, 0x18, 0x0a, 0xb1, 0xf6,
	0xba, 0xd9, 0x0f, 0xe1, 0x30, 0xd6, 0xdf, 0x6c, 0xb0, 0x04, 0xc7, 0xbb, 0x58, 0x4b, 0xb7, 0x36,
	0x14, 0xb8, 0xd9, 0xb5, 0xef, 0x41, 0x60, 0xf7, 0x14, 0x3e, 0x0a, 0x95, 0xba, 0xed, 0x5d, 0x86,
	0x8f, 0xa1, 0xb8, 0x46, 0xdd, 0x78, 0x2d, 0xa5, 0x9f, 0x93, 0xcb, 0x78, 0xeb, 0xa3, 0x09, 0xeb,
	0x79, 0x1b, 0xe3, 0xad, 0xb7, 0x54, 0x52, 0xd3, 0xff, 0x43, 0xbc, 0x9c, 0xb8, 0x1e, 0x2f, 0x87,
	0xb7, 0xc5, 0xcb, 0xdb, 0x5b, 0xe3, 0xdd, 0xd4, 0x5f, 0x2e, 0xd6, 0x3a, 0x6b, 0xc7, 0x25, 0x6c,
	0x67, 0x2d, 0x2f, 0x41, 0x82, 0x37, 0x3c, 0x12, 0x95, 0x59, 0xc6, 0x6c, 0x35, 0x91, 0x65, 0xac,
	0x2a, 0x91, 0xa5, 0xab, 0xad, 0x81, 0x94, 0x54, 0xf8, 0x80, 0x4b, 0x54, 0x27, 0xb6, 0xd1, 0xef,
	0x19, 0xae, 0xd7, 0x99, 0xba, 0xc3, 0x55, 0xa9, 0x0a, 0x7c, 0x12, 0x4a, 0x55, 0x55, 0x45, 0xaa,
	0xd7, 0x24, 0x4d, 0xa7, 0x9d, 0xae, 0xd6, 0x7c, 0xa2, 0xa6, 0x65, 0xed, 0xd4, 0x94, 0xe5, 0x27,
	0x69, 0xea, 0x13, 0xc6, 0x76, 0x68, 0xea, 0x2a, 0xd9, 0xfe, 0xc5, 0xa8, 0x7e, 0x7e, 0x33, 0xc7,
	0x89, 0xdb, 0x39, 0x4e, 0xdc, 0xcf, 0x31, 0xfa, 0x67, 0x8e, 0xd1, 0x8f, 0x3e, 0x46, 0xbf, 0xf8,
	0x18, 0xfd, 0xe6, 0x63, 0xf4, 0x87, 0x8f, 0xd1, 0x8d, 0x8f, 0xd1, 0x9f, 0x3e, 0x46, 0x7f, 0xf9,
	0x38, 0x71, 0xef, 0x63, 0xf4, 0xd3, 0x1d, 0x4e, 0xdc, 0xdc, 0xe1, 0xc4, 0xed, 0x1d, 0x4e, 0x98,
	0x7b, 0xc1, 0x1f, 0xf1, 0xb3, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x15, 0xc5, 0x37, 0xd4, 0x67,
	0x07, 0x00, 0x00,
}
